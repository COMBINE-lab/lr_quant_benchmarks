#libraries
from os.path import join

if not workflow.overwrite_configfiles:
    configfile: "config.yml"

alignment_dir = config["alignment_dir"]
data_dir = config["data_dir"]
ref_dir = config["ref_dir"]
index_dir = config["index_dir"]
minimap2 = config["minimap2"]

#rule build_minimap_index:
#    output:
#        mmidx = join(index_dir, 'mm2_{sample}_idx')
#    input:
#        ref_seq = join(ref_dir, "{rep}", config["transcriptome"])
#    threads:
#        32
#    params:
#./minimap2 -x map-ont -d MT-human-ont.mmi test/MT-human.fa

#Map long reads against transcripts using minimap2
rule map_long_reads_transcriptome:
    output: 
        bam_out = join(alignment_dir, '{rep}/{sample}_T.bam'),

    input:
        index = join(ref_dir, "{rep}", config["transcriptome"]),
        long_samples = lambda wildcards: join(data_dir, '{rep}/{sample}', config["data"][wildcards.sample])

    threads: 28

    params:
        ax_type = lambda wildcards: "map-pb" if wildcards.sample == "PacBio" else "map-ont"

    shell:
        ## do not apply any filters to the output bam file
        """
        {minimap2} --eqx -t {threads} -ax {params.ax_type} -N 100 {input.index} {input.long_samples}\
        | samtools view -@4 -h -bS > {output.bam_out}
        """

rule all_align_transcriptome:
    input:
        mapped_long_reads = expand( join(alignment_dir, '{rep}/{sample}_T.bam'), rep=["mouse"], sample = ["PacBio", "ONT"]),
